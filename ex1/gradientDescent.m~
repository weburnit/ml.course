function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);
for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %

    %theta -= (alpha/m) * (X' * (X*theta - y));
% 	temp_theta = theta;
% 	for j = 1:length(theta)		
% 		value = 0;
% 
% 		for i = 1:m
% 			value = value + (X(i,:) * theta- y(i,:)) * X(i,j);
% 		end
% 
% 		temp_theta(j,:) = temp_theta(j,:) - ((alpha/m)*value);
% 	end
% 
% 	theta = temp_theta;

%      tempTheta = theta;
%      for j = 1:length(theta)
%          h = (X*tempTheta - y);
%          thetaDerative = 0;
%          for i = 1:m
%              thetaDerative = thetaDerative + h(j) * X(i,j);
%          end
%          tempTheta(j,:) = tempTheta(j,:) - (alpha/m)*thetaDerative;
%      end
%   
% 
%      theta = tempTheta;
    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
